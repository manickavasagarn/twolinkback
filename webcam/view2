from django.shortcuts import render
from django.http import StreamingHttpResponse
import cv2
import numpy as np
import face_recognition
import mediapipe as mp
import torch
import threading
import platform
from multiprocessing import Process, Manager, cpu_count, set_start_method
import time
from ultralytics import YOLO

# Load known face encodings
known_face_encodings = []
known_face_names = []

def next_id(current_id, worker_num):
    if current_id == worker_num:
        return 1
    else:
        return current_id + 1
    
 # Get previous worker's id
def prev_id(current_id, worker_num):
    if current_id == 1:
        return worker_num
    else:
        return current_id - 1   
    


# Load known faces and their encodings
def load_known_faces():
    user_image = face_recognition.load_image_file("static/userimage/user.jpeg")
    user_face_encoding = face_recognition.face_encodings(user_image)[0]


    known_face_encodings.extend([user_face_encoding])
    known_face_names.extend(["user"])

# Initialize camera, face_mesh, and YOLO model
camera = cv2.VideoCapture(0)
face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)
yolo_model = torch.hub.load('ultralytics/yolov5', 'yolov5s')

load_known_faces()  # Load known faces when the server starts

def gen_frames():
    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            # Resize frame of video to 1/4 size for faster face recognition processing
            small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
            # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
            rgb_small_frame = np.ascontiguousarray(small_frame[:, :, ::-1])

            # Only process every other frame of video to save time

            # Find all the faces and face encodings in the current frame of video
            face_locations = face_recognition.face_locations(rgb_small_frame)
            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
            face_names = []
            for face_encoding in face_encodings:
                # See if the face is a match for the known face(s)
                matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
                name = "Unknown"
                # Or instead, use the known face with the smallest distance to the new face
                face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                best_match_index = np.argmin(face_distances)
                if matches[best_match_index]:
                    name = known_face_names[best_match_index]

                face_names.append(name)

            # Display the results
            for (top, right, bottom, left), name in zip(face_locations, face_names):
                # Scale back up face locations since the frame we detected in was scaled to 1/4 size
                top *= 4
                right *= 4
                bottom *= 4
                left *= 4

                rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                output = face_mesh.process(rgb_frame)
                landmark_points = output.multi_face_landmarks
                frame_h, frame_w, _ = frame.shape
                if landmark_points:
                    landmarks = landmark_points[0].landmark
                    for landmark in landmarks[469:478]:
                        x = int(landmark.x * frame_w)
                        y = int(landmark.y * frame_h)
                        cv2.circle(frame, (x, y), 3, (0, 255, 0))

            # Perform YOLOv5 object detection on the frame
            results = yolo_model(frame)  # YOLOv5 inference

            for det in results.pred[0]:
                label = det[-1].numpy()
                confidence = det[4].numpy()
                if confidence > 0.5:  # You can adjust the confidence threshold
                    x1, y1, x2, y2 = map(int, det[:4].numpy())
                    class_name = yolo_model.names[int(label)]
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(frame, f'{class_name} {confidence:.2f}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
                font = cv2.FONT_HERSHEY_DUPLEX
                cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


def index(request):
    return render(request, 'index.html')

def video_feed(request):
    return StreamingHttpResponse(gen_frames(), content_type='multipart/x-mixed-replace;boundary=frame')


'''

def gen_frames3():

        # Fix Bug on MacOS
        if platform.system() == 'Darwin':
            set_start_method('forkserver')

        # Global variables
        Global = Manager().Namespace()
        Global.buff_num = 1
        Global.read_num = 1
        Global.write_num = 1
        Global.frame_delay = 0
        Global.is_exit = False
        read_frame_list = Manager().dict()
        write_frame_list = Manager().dict()

        # Number of workers (subprocesses used to process frames)
        worker_num = cpu_count() - 1 if cpu_count() > 2 else 2

        # Subprocess list
        p = []

        # Create a thread to capture frames (if using subprocess, it will crash on Mac)
        p.append(threading.Thread(target=capture, args=(read_frame_list, Global, worker_num, 0)))
        p[0].start()

        # Load a sample picture and learn how to recognize it.
        Nicolas_image = face_recognition.load_image_file("static/userimage/Nicolas.jpeg")
        Nicolas_face_encoding = face_recognition.face_encodings(Nicolas_image)[0]

        # Create arrays of known face encodings and their names
        Global.known_face_encodings = [
            Nicolas_face_encoding
        ]
        Global.known_face_names = [
            "Nicolas"
        ]

        # Create workers
        for worker_id in range(1, worker_num + 1):
            p.append(Process(target=process, args=(worker_id, read_frame_list, write_frame_list, Global, worker_num,)))
            p[worker_id].start()

        # Start to show video
        last_num = 1
        fps_list = []
        tmp_time = time.time()
        while not Global.is_exit:
            while Global.write_num != last_num:
                last_num = int(Global.write_num)

                # Calculate fps
                delay = time.time() - tmp_time
                tmp_time = time.time()
                fps_list.append(delay)
                if len(fps_list) > 5 * worker_num:
                    fps_list.pop(0)
                fps = len(fps_list) / np.sum(fps_list)
                print("fps: %.2f" % fps)

                # Calculate frame delay, in order to make the video look smoother.
                # When fps is higher, should use a smaller ratio, or fps will be limited in a lower value.
                # Larger ratio can make the video look smoother, but fps will hard to become higher.
                # Smaller ratio can make fps higher, but the video looks not too smoother.
                # The ratios below are tested many times.
                Global.frame_delay = 0.001
                # Display the resulting image
                frame = write_frame_list[prev_id(Global.write_num, worker_num)]
                #cv2.imshow('Video', write_frame_list[prev_id(Global.write_num, worker_num)])
                ret, buffer = cv2.imencode('.jpg', frame)
                frame = buffer.tobytes()
                yield (b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')



            time.sleep(0.0001)
'''